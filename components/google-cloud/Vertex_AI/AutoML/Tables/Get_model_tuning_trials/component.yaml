name: Get model tuning trials for Google Cloud Vertex AI AutoML Tables
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/google-cloud/Vertex_AI/AutoML/Tables/Get_model_tuning_trials/component.yaml'}
inputs:
- {name: model_name, type: GoogleCloudVertexAiModelName}
outputs:
- {name: tuning_trials, type: JsonArray}
- {name: model_structures, type: JsonArray}
- {name: extra_entries, type: JsonArray}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'google-cloud-logging==2.7.0' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m
      pip install --quiet --no-warn-script-location 'google-cloud-logging==2.7.0'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def get_model_tuning_trials_for_Google_Cloud_Vertex_AI_AutoML_Tables(
          model_name,
      ):
          import json
          from google.cloud import logging as cloud_logging

          (_, project, _, location, _, model_id) = model_name.split("/")

          # Need to specify project when initializing client.
          # Otherwise we'll get error when running on Vertex AI Pipelines:
          # google.api_core.exceptions.PermissionDenied: 403 The caller does not have permission
          cloud_logging_client = cloud_logging.Client(project=project)

          # Full filter:
          # resource.type="cloudml_job" resource.labels.job_id="{job_id}" resource.labels.project_id="{project_id}" labels.log_type="automl_tables" jsonPayload."@type"="type.googleapis.com/google.cloud.automl.master.TuningTrial"
          log_filter=f'resource.labels.job_id="{model_id}"'
          log_entry_list = list(cloud_logging_client.list_entries(filter_=log_filter))

          tuning_trials = []
          model_structures = []
          extra_entries = []
          for entry in log_entry_list:
              if entry.payload.get("@type") == "type.googleapis.com/google.cloud.automl.master.TuningTrial":
                  tuning_trials.append(entry.payload)
              elif entry.payload.get("@type") == "type.googleapis.com/google.cloud.automl.master.TablesModelStructure":
                  model_structures.append(entry.payload)
              else:
                  extra_entries.append(entry.payload)

          # Manually serializing the results for pretty and stable output
          print("Tuning trials:")
          tuning_trials_json = json.dumps(tuning_trials, sort_keys=True, indent=2)
          print(tuning_trials_json)

          print("Model structures:")
          model_structures_json = json.dumps(model_structures, sort_keys=True, indent=2)
          print(model_structures_json)

          print("Extra entries:")
          extra_entries_json = json.dumps(extra_entries, sort_keys=True, indent=2)
          print(extra_entries_json)

          return (tuning_trials_json, model_structures_json, extra_entries_json)

      def _serialize_json(obj) -> str:
          if isinstance(obj, str):
              return obj
          import json
          def default_serializer(obj):
              if hasattr(obj, 'to_struct'):
                  return obj.to_struct()
              else:
                  raise TypeError("Object of type '%s' is not JSON serializable and does not have .to_struct() method." % obj.__class__.__name__)
          return json.dumps(obj, default=default_serializer, sort_keys=True)

      import argparse
      _parser = argparse.ArgumentParser(prog='Get model tuning trials for Google Cloud Vertex AI AutoML Tables', description='')
      _parser.add_argument("--model-name", dest="model_name", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=3)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = get_model_tuning_trials_for_Google_Cloud_Vertex_AI_AutoML_Tables(**_parsed_args)

      _output_serializers = [
          _serialize_json,
          _serialize_json,
          _serialize_json,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --model-name
    - {inputValue: model_name}
    - '----output-paths'
    - {outputPath: tuning_trials}
    - {outputPath: model_structures}
    - {outputPath: extra_entries}
