name: Create Vowpal Wabbit JSON dataset from CSV
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/ML_frameworks/Vowpal_Wabbit/Create_JSON_dataset/from_CSV/component.yaml'}
inputs:
- {name: dataset, type: CSV}
- {name: label_column_name, type: String, optional: true}
outputs:
- {name: converted_dataset, type: VowpalWabbitJsonDataset}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.4.1' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==1.4.1' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def create_Vowpal_Wabbit_JSON_dataset_from_CSV(
          dataset_path,
          converted_dataset_path,
          label_column_name = None,
      ):
          import json
          import pandas

          df = pandas.read_csv(dataset_path)

          if label_column_name:
              label_series = df[label_column_name]
              features_df = df.drop(columns=[label_column_name])
              label_values_list = label_series.to_list()
              feature_records_list = features_df.to_dict("records")

              with open(converted_dataset_path, "w") as f:
                  for features, label in zip(feature_records_list, label_values_list):
                      non_nan_features = {
                          k: v for k, v in features.items() if v == v and v is not None
                      }
                      vw_record = {
                          "_label": label,
                      }
                      vw_record.update(non_nan_features)
                      vw_record_line = json.dumps(vw_record)
                      f.write(vw_record_line + "\n")
          else:
              features_df = df
              feature_records_list = features_df.to_dict("records")

              with open(converted_dataset_path, "w") as f:
                  for features in feature_records_list:
                      non_nan_features = {
                          k: v for k, v in features.items() if v == v and v is not None
                      }
                      vw_record = non_nan_features
                      vw_record_line = json.dumps(vw_record)
                      f.write(vw_record_line + "\n")

      import argparse
      _parser = argparse.ArgumentParser(prog='Create Vowpal Wabbit JSON dataset from CSV', description='')
      _parser.add_argument("--dataset", dest="dataset_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--label-column-name", dest="label_column_name", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--converted-dataset", dest="converted_dataset_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = create_Vowpal_Wabbit_JSON_dataset_from_CSV(**_parsed_args)
    args:
    - --dataset
    - {inputPath: dataset}
    - if:
        cond: {isPresent: label_column_name}
        then:
        - --label-column-name
        - {inputValue: label_column_name}
    - --converted-dataset
    - {outputPath: converted_dataset}
