name: Convert to OnnxModel from ScikitLearnPickleModel
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/_converters/ScikitLearnPickleModel/to_OnnxModel/component.yaml'}
inputs:
- {name: model, type: ScikitLearnPickleModel}
- {name: doc_string, type: String, default: '', optional: true}
- {name: target_opset, type: Integer, optional: true}
outputs:
- {name: converted_model, type: OnnxModel}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'skl2onnx==1.11' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'skl2onnx==1.11' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def convert_to_OnnxModel_from_ScikitLearnPickleModel(
          model_path,
          converted_model_path,
          doc_string = "",
          target_opset = None,
      ):
          import onnx
          import pickle
          import skl2onnx

          with open(model_path, "rb") as model_file:
              model = pickle.load(model_file)

          # Funny hack to infer the model input shape
          # Just try passing arrays of different size to the model.predict method and check what works, lol.
          def get_input_output_shapes(model):
              for input_length_candidate in range(100000):
                  try:
                      prediction = model.predict(X=[[0.0] * input_length_candidate])
                      input_length = input_length_candidate
                      output_shape = prediction.shape[1:]
                      return (input_length, output_shape)
                  except:
                      pass
              return None

          input_length, _ = get_input_output_shapes(model)

          # Setting model name is not necessary, but why not.
          model_type = type(model)
          model_type_name = model_type.__module__ + "." + model_type.__name__

          onnx_model = skl2onnx.convert_sklearn(
              model=model,
              initial_types=[
                  ("input", skl2onnx.common.data_types.FloatTensorType([None, input_length]))
              ],
              name=model_type_name,
              verbose=1,
              # TODO: Include the original model hash digest so that the model can be traced.
              doc_string=doc_string,
              target_opset=target_opset,
          )
          print(onnx_model)
          onnx.save_model(
              proto=onnx_model, f=converted_model_path,
          )

      import argparse
      _parser = argparse.ArgumentParser(prog='Convert to OnnxModel from ScikitLearnPickleModel', description='')
      _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--doc-string", dest="doc_string", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--target-opset", dest="target_opset", type=int, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--converted-model", dest="converted_model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = convert_to_OnnxModel_from_ScikitLearnPickleModel(**_parsed_args)
    args:
    - --model
    - {inputPath: model}
    - if:
        cond: {isPresent: doc_string}
        then:
        - --doc-string
        - {inputValue: doc_string}
    - if:
        cond: {isPresent: target_opset}
        then:
        - --target-opset
        - {inputValue: target_opset}
    - --converted-model
    - {outputPath: converted_model}
