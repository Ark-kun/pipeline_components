name: Convert to OnnxModel from XGBoostJsonModel
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/_converters/OnnxModel/from_XGBoostJsonModel/component.yaml'}
inputs:
- {name: model, type: XGBoostJsonModel}
- {name: model_graph_name, type: String, optional: true}
- {name: doc_string, type: String, default: '', optional: true}
- {name: target_opset, type: Integer, optional: true}
outputs:
- {name: converted_model, type: OnnxModel}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'xgboost==1.5.2' 'onnx==1.11.0' 'onnxmltools==1.10.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'xgboost==1.5.2' 'onnx==1.11.0'
      'onnxmltools==1.10.0' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def convert_to_OnnxModel_from_XGBoostJsonModel(
          model_path,
          converted_model_path,
          model_graph_name = None,
          doc_string = "",
          target_opset = None,
      ):
          import xgboost
          import onnx
          import onnxmltools

          # The file path needs to have .json extension so that the model is loaded as JSON format.
          import os
          import shutil
          import tempfile
          with tempfile.NamedTemporaryFile(suffix=".json") as tmp_model_file:
              tmp_model_path = tmp_model_file.name
              shutil.copy(model_path, tmp_model_path)
              model = xgboost.Booster(model_file=tmp_model_path)

          # Workaround for https://github.com/onnx/onnxmltools/issues/499
          # Although I'm not sure this formula is correct given https://github.com/dmlc/xgboost/pull/6569
          model.best_ntree_limit = model.num_boosted_rounds()

          converted_model = onnxmltools.convert_xgboost(
              model=model,
              name=model_graph_name,
              initial_types=[
                  (
                      "input",
                      onnxmltools.convert.common.data_types.FloatTensorType(
                          shape=[None, model.num_features()]
                      ),
                  )
              ],
              doc_string=doc_string,
              target_opset=target_opset,
          )
          onnx.save_model(proto=converted_model, f=converted_model_path)

      import argparse
      _parser = argparse.ArgumentParser(prog='Convert to OnnxModel from XGBoostJsonModel', description='')
      _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model-graph-name", dest="model_graph_name", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--doc-string", dest="doc_string", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--target-opset", dest="target_opset", type=int, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--converted-model", dest="converted_model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = convert_to_OnnxModel_from_XGBoostJsonModel(**_parsed_args)
    args:
    - --model
    - {inputPath: model}
    - if:
        cond: {isPresent: model_graph_name}
        then:
        - --model-graph-name
        - {inputValue: model_graph_name}
    - if:
        cond: {isPresent: doc_string}
        then:
        - --doc-string
        - {inputValue: doc_string}
    - if:
        cond: {isPresent: target_opset}
        then:
        - --target-opset
        - {inputValue: target_opset}
    - --converted-model
    - {outputPath: converted_model}
