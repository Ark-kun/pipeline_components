name: Build list of strings
description: Creates a JSON array from multiple strings.
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/json/Build_list_of_strings/component.yaml'}
inputs:
- {name: item_1, type: String, optional: true}
- {name: item_2, type: String, optional: true}
- {name: item_3, type: String, optional: true}
- {name: item_4, type: String, optional: true}
- {name: item_5, type: String, optional: true}
outputs:
- {name: Output, type: JsonArray}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def build_list_of_strings(
          item_1 = None,
          item_2 = None,
          item_3 = None,
          item_4 = None,
          item_5 = None,
      ):
          """Creates a JSON array from multiple strings.

          Annotations:
              author: Alexey Volkov <alexey.volkov@ark-kun.com>
          """
          result = []
          for item in [item_1, item_2, item_3, item_4, item_5]:
              if item is not None:
                  result.append(item)
          return result

      def _serialize_json(obj) -> str:
          if isinstance(obj, str):
              return obj
          import json
          def default_serializer(obj):
              if hasattr(obj, 'to_struct'):
                  return obj.to_struct()
              else:
                  raise TypeError("Object of type '%s' is not JSON serializable and does not have .to_struct() method." % obj.__class__.__name__)
          return json.dumps(obj, default=default_serializer, sort_keys=True)

      import argparse
      _parser = argparse.ArgumentParser(prog='Build list of strings', description='Creates a JSON array from multiple strings.')
      _parser.add_argument("--item-1", dest="item_1", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--item-2", dest="item_2", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--item-3", dest="item_3", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--item-4", dest="item_4", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--item-5", dest="item_5", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = build_list_of_strings(**_parsed_args)

      _outputs = [_outputs]

      _output_serializers = [
          _serialize_json,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - if:
        cond: {isPresent: item_1}
        then:
        - --item-1
        - {inputValue: item_1}
    - if:
        cond: {isPresent: item_2}
        then:
        - --item-2
        - {inputValue: item_2}
    - if:
        cond: {isPresent: item_3}
        then:
        - --item-3
        - {inputValue: item_3}
    - if:
        cond: {isPresent: item_4}
        then:
        - --item-4
        - {inputValue: item_4}
    - if:
        cond: {isPresent: item_5}
        then:
        - --item-5
        - {inputValue: item_5}
    - '----output-paths'
    - {outputPath: Output}
