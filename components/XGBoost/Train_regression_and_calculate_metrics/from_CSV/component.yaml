name: Xgboost train regression and calculate metrics on csv
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/XGBoost/Train_regression_and_calculate_metrics/from_CSV/component.yaml'}
inputs:
- {name: training_data, type: CSV}
- {name: testing_data, type: CSV}
- {name: label_column, type: Integer, default: '0', optional: true}
- {name: objective, type: String, default: 'reg:squarederror', optional: true}
- {name: num_iterations, type: Integer, default: '200', optional: true}
outputs:
- {name: model, type: XGBoostModel}
- {name: mean_absolute_error, type: Float}
- {name: mean_squared_error, type: Float}
- {name: root_mean_squared_error, type: Float}
- {name: metrics, type: JsonObject}
implementation:
  graph:
    tasks:
      Xgboost train:
        componentRef: {digest: 58d279448fda37f1ad85d39751b987bcecaa950281287fdac756315d186f03a3,
          url: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/d8c4cf5e6403bc65bcf8d606e6baf87e2528a3dc/components/XGBoost/Train/component.yaml'}
        arguments:
          training_data:
            graphInput: {inputName: training_data}
          label_column:
            graphInput: {inputName: label_column}
          num_iterations:
            graphInput: {inputName: num_iterations}
          objective:
            graphInput: {inputName: objective}
      Xgboost predict:
        componentRef: {digest: 078a0ecebb80c2743b13db45aeb3c26cde4e9b0c500bd429c7db1cd2bc565d9a,
          url: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/d8c4cf5e6403bc65bcf8d606e6baf87e2528a3dc/components/XGBoost/Predict/component.yaml'}
        arguments:
          data:
            graphInput: {inputName: testing_data}
          model:
            taskOutput: {outputName: model, taskId: Xgboost train, type: XGBoostModel}
          label_column:
            graphInput: {inputName: label_column}
      Pandas Transform DataFrame in CSV format:
        componentRef: {digest: 777017bf588eba84bc1c685198931d3c295036ba492f28bdb0fc5f5bcad5d439,
          url: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/d8c4cf5e6403bc65bcf8d606e6baf87e2528a3dc/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml'}
        arguments:
          table:
            graphInput: {inputName: testing_data}
          transform_code: df = df[["tips"]]
      Remove header:
        componentRef: {digest: 5e8bc75d0817daeaa25e15ae866a7483946fcfac7ce1d5f998a2c77d6fa1836b,
          url: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/d8c4cf5e6403bc65bcf8d606e6baf87e2528a3dc/components/tables/Remove_header/component.yaml'}
        arguments:
          table:
            taskOutput: {outputName: transformed_table, taskId: Pandas Transform DataFrame
                in CSV format, type: CSV}
      Calculate regression metrics from csv:
        componentRef: {digest: 944def5d4b82aaeee38ac5c171f5e4007d639cfa00e065443dba684a38f7cf7e,
          url: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/d8c4cf5e6403bc65bcf8d606e6baf87e2528a3dc/components/ml_metrics/Calculate_regression_metrics/from_CSV/component.yaml'}
        arguments:
          true_values:
            taskOutput: {outputName: table, taskId: Remove header}
          predicted_values:
            taskOutput: {outputName: predictions, taskId: Xgboost predict, type: Predictions}
    outputValues:
      model:
        taskOutput: {outputName: model, taskId: Xgboost train, type: XGBoostModel}
      mean_absolute_error:
        taskOutput: {outputName: mean_absolute_error, taskId: Calculate regression
            metrics from csv, type: Float}
      mean_squared_error:
        taskOutput: {outputName: mean_squared_error, taskId: Calculate regression
            metrics from csv, type: Float}
      root_mean_squared_error:
        taskOutput: {outputName: root_mean_squared_error, taskId: Calculate regression
            metrics from csv, type: Float}
      metrics:
        taskOutput: {outputName: metrics, taskId: Calculate regression metrics from
            csv, type: JsonObject}
