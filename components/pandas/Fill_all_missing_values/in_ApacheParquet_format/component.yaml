name: Fill all missing values using Pandas on ApacheParquet data
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/pandas/Fill_all_missing_values/in_ApacheParquet_format/component.yaml'}
inputs:
- {name: table, type: ApacheParquet}
- {name: replacement_value, type: String, default: '0', optional: true}
outputs:
- {name: transformed_table, type: ApacheParquet}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.4.1' 'pyarrow==9.0.0' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'pandas==1.4.1' 'pyarrow==9.0.0'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def fill_all_missing_values_using_Pandas_on_ApacheParquet_data(
          table_path,
          transformed_table_path,
          replacement_value = "0",
      ):
          import pandas

          df = pandas.read_parquet(path=table_path)
          for column_name in df.columns:
              column = df[column_name]
              # The `.astype` method does not work correctly on booleans
              # So we need to special-case them
              if pandas.api.types.is_bool_dtype(column.dtype):
                  if replacement_value.lower() in ("true", "1"):
                      converted_replacement_value = True
                  elif replacement_value.lower() in ("false", "0"):
                      converted_replacement_value = False
                  else:
                      raise ValueError(
                          f"Cannot convert value '{replacement_value}' to boolean for column {column_name}."
                      )
              else:
                  # Using Pandas to convert the replacement_value to column.dtype.
                  converted_replacement_value = pandas.Series(
                      replacement_value, dtype=column.dtype
                  ).tolist()[0]

              print(
                  f"Filling missing values in column '{column_name}' with '{converted_replacement_value}'"
              )
              column.fillna(value=converted_replacement_value)

          df.to_parquet(
              path=transformed_table_path,
              index=False,
          )

      import argparse
      _parser = argparse.ArgumentParser(prog='Fill all missing values using Pandas on ApacheParquet data', description='')
      _parser.add_argument("--table", dest="table_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--replacement-value", dest="replacement_value", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--transformed-table", dest="transformed_table_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = fill_all_missing_values_using_Pandas_on_ApacheParquet_data(**_parsed_args)
    args:
    - --table
    - {inputPath: table}
    - if:
        cond: {isPresent: replacement_value}
        then:
        - --replacement-value
        - {inputValue: replacement_value}
    - --transformed-table
    - {outputPath: transformed_table}
