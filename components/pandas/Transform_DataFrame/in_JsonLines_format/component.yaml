name: Transform using Pandas DataFrame on JsonLines data
description: Transform DataFrame loaded from an ApacheParquet file.
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/pandas/Transform_DataFrame/in_JsonLines_format/component.yaml'}
inputs:
- {name: table, type: JsonLines, description: DataFrame to transform.}
- name: transform_code
  type: PythonCode
  description: |-
    Transformation code. Code is written in Python and can consist of multiple lines.
    The DataFrame variable is called "df".
    Examples:
    - `df['prod'] = df['X'] * df['Y']`
    - `df = df[['X', 'prod']]`
    - `df.insert(0, "is_positive", df["X"] > 0)`
outputs:
- {name: transformed_table, type: JsonLines, description: Transformed DataFrame.}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.4.3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==1.4.3' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def transform_using_Pandas_DataFrame_on_JsonLines_data(
          table_path,
          transformed_table_path,
          transform_code,
      ):
          """Transform DataFrame loaded from an ApacheParquet file.

          Args:
              table_path: DataFrame to transform.
              transform_code: Transformation code. Code is written in Python and can consist of multiple lines.
                  The DataFrame variable is called "df".
                  Examples:
                  - `df['prod'] = df['X'] * df['Y']`
                  - `df = df[['X', 'prod']]`
                  - `df.insert(0, "is_positive", df["X"] > 0)`
              transformed_table_path: Transformed DataFrame.
          """
          import pandas

          df = pandas.read_json(path_or_buf=table_path, lines=True)
          # The namespace is needed so that the code can replace `df`. For example df = df[['X']]
          namespace = dict(df=df)
          exec(transform_code, namespace)
          df = namespace["df"]
          df.to_json(path_or_buf=transformed_table_path, orient="records", lines=True)

      import argparse
      _parser = argparse.ArgumentParser(prog='Transform using Pandas DataFrame on JsonLines data', description='Transform DataFrame loaded from an ApacheParquet file.')
      _parser.add_argument("--table", dest="table_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--transform-code", dest="transform_code", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--transformed-table", dest="transformed_table_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = transform_using_Pandas_DataFrame_on_JsonLines_data(**_parsed_args)
    args:
    - --table
    - {inputPath: table}
    - --transform-code
    - {inputValue: transform_code}
    - --transformed-table
    - {outputPath: transformed_table}
